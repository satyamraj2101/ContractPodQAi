name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_IMAGE_NAME: contractpodai-docs-assistant
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            # Navigate to application directory
            cd /home/ubuntu/contractpodai-docs-assistant
            
            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Pull latest image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Stop and remove old container
            docker-compose down
            
            # Start new container with updated image (using env var)
            export DOCKER_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker-compose up -d
            
            # Clean up old images
            docker image prune -af --filter "until=24h"
            
            # Verify deployment
            docker-compose ps
            docker-compose logs --tail=50
      
      - name: Verify deployment health
        run: |
          echo "Waiting 30 seconds for application to start..."
          sleep 30
          
          HEALTH_URL="http://${{ secrets.EC2_HOST }}:5000/api/health"
          echo "Checking health endpoint: $HEALTH_URL"
          
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" | grep -q "ok"; then
              echo "‚úÖ Deployment successful! Application is healthy."
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          echo "‚ùå Deployment verification failed. Application may not be healthy."
          exit 1
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Deployment completed successfully!"
          else
            echo "‚ö†Ô∏è Deployment failed. Check logs for details."
          fi
